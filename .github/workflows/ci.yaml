name: Helm Chart Testing and Artifact Build

on:
  push:
    branches:
      - develop
      - main
  pull_request:
    branches:
      - main
      - develop
jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Helm
      uses: azure/setup-helm@v1
      with:
        version: 'v3.13.0' # You can specify the Helm version you want to use

    - name: Install Helm Chart Dependencies
      run: |
        helm dependency update

    - name: Lint Helm Chart
      run: |
        helm lint .

    - name: Package Chart
      run: |
        helm package -d chart .
        mv chart/kobo*.tgz chart/kobo.tgz 
   
  deploy-to-kind:
    needs: build-and-publish
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      
    - name: Install Kind
      run: |
        curl -Lo kind https://kind.sigs.k8s.io/dl/v0.11.1/kind-linux-amd64
        chmod +x kind
        sudo mv kind /usr/local/bin/

    - name: Create Kind Cluster
      run: kind create cluster --name my-kind-cluster

    - name: Load Docker Image
      run: |
        docker pull docker.io/bitnami/postgresql:15.4.0-debian-11-r45
        docker pull kobotoolbox/kobocat:2.023.37a
        docker pull kobotoolbox/kpi:2.023.37f

        kind load docker-image docker.io/bitnami/postgresql:15.4.0-debian-11-r45 --name my-kind-cluster
        kind load docker-image kobotoolbox/kobocat:2.023.37a --name my-kind-cluster
        kind load docker-image kobotoolbox/kpi:2.023.37f --name my-kind-cluster

    - name: Deploy Helm Chart to Kind
      run: |
        helm upgrade --install kobo . \
        --set kpi.env.secret.DATABASE_URL="postgres://postgres:password@postgres-postgresql:5432/postgres" \
        --set postgresql.enabled="true" \
        --set postgresql.auth.postgresPassword="password" \
        --set postgresql.primary.persistence.size="1Gi" \
        --set kobotoolbox.kobocatDatabase="postgis://postgres:password@postgres-postgresql:5432/postgres" \
        --set kpi.autoscaling.enabled="false" \
        --set kobocat.autoscaling.enabled="false" \
        --set kobocat.worker.replicaCount=0 \
        --set kobocat.resources.requests.cpu="100m" \
        --set kobocat.resources.requests.memory="200Mi" \
        --set kpi.worker.replicaCount=0 \
        --set kpi.workerLowPriority.replicaCount=0 \
        --set kpi.workerLowPriority.autoscaling.enabled="false" \
        --set kpi.worker.autoscaling.enabled="false" \
        --set mongodb.enabled="true" \
        --set mongodb.architecture="standalone" \
        --set mongodb.auth.rootPassword="password" \
        --set mongodb.persistence.size=1Gi \
        --set kobotoolbox.mongoDatabase="mongodb://root:password@mongodb:27017" \
        --set redis.enabled="true" \
        --set redis.replica.replicaCount=1 \
        --set redis.replica.persistence.size=1Gi \
        --set redis.master.persistence.size=1Gi \
        --namespace default
    
    - name: Check All Pods are running
      run: |
        while [[ $(kubectl get pods --field-selector=status.phase=Running --no-headers | wc -l) -lt $(kubectl get pods --no-headers | wc -l) ]]; do
          kubectl get po
          sleep 10
        done

        echo "All pods are up and running."

